const bigNumber = require('bignumber.js')
const ethers = require('ethers')

module.exports = getArgs

function getArgs( element, selector ) {
  var args = []
  var fields = element.querySelectorAll(`[class^=${selector}]`)

  fields.forEach(x => {
    let title = x.children[0].title
    if (title.includes('[')) {  // if type is an array
      var argumentsInArr = []
      if (title.includes('bool')) {  // if it's an array of booleans
        let inputs = x.querySelectorAll("[class^='booleanField']")
        inputs.forEach(y => {
            argumentsInArr.push(getBool(y))
        })
      } else { // in any other type of array
        var inputs = x.querySelectorAll('input')
        inputs.forEach(z => {
          let el = z
          let val = z.value
          argumentsInArr.push(getArgument(el, val))
        })
      }
      args.push(argumentsInArr)
    }
    else if (title.includes('bool')) { // if not an array, but boolean
      var boolField = x.querySelector("[class^='booleanField']")
      args.push(getBool(boolField))
    }
    else { // not an array (inputs.length = 1) and not a boolean
      let el = x.querySelector('input')
      let val = el.value
      args.push(getArgument(el, val))
    }
  })

  return args
}

function getBool (boolField) {
  var val
  let falseField = boolField.children[0]
  let trueField = boolField.children[1]
  if (falseField.dataset.state === "active") val = false
  else if (trueField.dataset.state === "active") val = true
  return val
}

function getArgument(el, val) {
  var argument
  if ((el.dataset.type.search(/\buint/) != -1) || (el.dataset.type.search(/\bint/) != -1) || (el.dataset.type.search(/\bfixed/) != -1)) {
    if (val > Number.MAX_SAFE_INTEGER) {
      let number = bigNumber(Number(val)).toFixed(0)
      argument = ethers.utils.bigNumberify(number.toString())
    } else {
      argument = Number(val)
    }
  }
  if (el.dataset.type.search(/\bbyte/) != -1) argument = val
  if (el.dataset.type.search(/\bstring/) != -1) argument = val
  if (el.dataset.type.search(/\baddress/) != -1) argument = val
  return argument
}

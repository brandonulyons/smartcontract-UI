const bel = require("bel")
const date = require('getDate')
const shortenHexData = require('shortenHexData')
const copy = require('copy-text-to-clipboard')
const ethers = require('ethers')
const decodeTxCalldata = require('decodeTxCalldata')

module.exports = makeReturn

async function makeReturn (css, contract, solcMetadata, provider, transaction, fnName) {
  ethers
  var types = returnTypes(solcMetadata.output.abi, fnName)
  var decodedTx
  var data
  var el = bel`<div class=${css.txReturnItem}></div>`
  if (transaction.hash) {  // nonpayable and payable
    var receipt = await transaction.wait()
    var data = JSON.stringify(decodeTxCalldata(transaction.data, fnName, solcMetadata), null, 2)
    el.appendChild(moreInfo(css, provider, transaction))
  } else { // view and pure
    if (types.length === 0) decodedTx = []
    else if (types.length === 1) decodedTx = decodeTxReturn(transaction, types[0])
    else decodedTx = decodeTxReturn(transaction, types)
    var data = decodedTx
  }
  el.appendChild(makeTxOutput(css, data))
  return el
}

function makeTxOutput (css, data) {
  return bel`
    <div class=${css.txReceipt}>
        <div class=${css.txReturnField}>
          <div class=${css.txReturnValue}>${JSON.stringify(data, null, 2)}</div>
        </div>
    </div>`
}

function moreInfo (css, provider, transaction) {
  var linkToEtherscan = "https://" + provider._network.name  + ".etherscan.io/tx/" + transaction.hash
  return bel`<div class=${css.infoIcon} title="Take me to the Etherscan"><a href=${linkToEtherscan} target="_blank"><i class="fa fa-info-circle"></i></a></div>`
}

function returnTypes (abi, fnName) {
  item = []
  for (var i = 0; i < abi.length; i++) {
    let item = abi[i]
    if (item.name === fnName) return item.outputs
  }
}

function decode (tx, output) {
  if (output.type.includes('int')) return tx.toString()
  if (output.type === ('bytes32')) return ethers.utils.parseBytes32String(tx)
  else return tx
}

function decodeTxReturn (tx, types) {
  var result
  if (Array.isArray(tx)) {  // recursive case
    result = tx.map((x, i) => decodeTxReturn(x,getTypes(types, i)))
    return result
  } else { // atomic case
    decoded = decode(tx, types)
    return decoded
  }
}

function getTypes (types, i) {
  if (Array.isArray(types)) return types[i]
  if (types.components) return types.components
  return types
}

function makeTxReceipt (css, transaction, receipt, fnName, solcMetadata) {
  var txData = JSON.stringify(decodeTxCalldata(transaction.data, fnName, solcMetadata), null, 2)
  return bel`
  <div class=${css.txReceipt}>
      <div class=${css.txReturnField}>
        <div class=${css.txReturnTitle}># status</div>
        <div class=${css.txReturnValue}>${receipt.status === 1 ? 'success' : 'failed'}</div>
      </div>
      <div class=${css.txReturnField}>
        <div class=${css.txReturnTitle}># timestamp</div>
        <div class=${css.txReturnValue}>${date()}</div>
      </div>
      <div class=${css.txReturnField}>
        <div class=${css.txReturnTitle}># sent data</div>
        <div class=${css.txReturnValue} onclick=${()=>copy(txData)}>${txData}</div>
      </div>
      <div class=${css.txReturnField}>
        <div class=${css.txReturnTitle}># transaction address</div>
        <div class=${css.txReturnValue} onclick=${()=>copy(receipt.transactionHash)}>${shortenHexData(receipt.transactionHash)}</div>
      </div>
      <div class=${css.txReturnField} onclick=${()=>copy(receipt.from)}>
        <div class=${css.txReturnTitle}># signed by</div>
        <div class=${css.txReturnValue} onclick=${()=>copy(receipt.from)}>${shortenHexData(receipt.from)}</div>
      </div>
      <div class=${css.txReturnField}>
        <div class=${css.txReturnTitle}># gas price</div>
        <div class=${css.txReturnValue} onclick=${()=>copy(transaction.gasPrice._hex)}>${parseInt(transaction.gasPrice._hex) || free}</div>
      </div>
  </div>`
}

const bel = require("bel")
const date = require('getDate')
const shortenHexData = require('shortenHexData')
const copy = require('copy-text-to-clipboard')
const ethers = require('ethers')

module.exports = makeReturn

async function makeReturn (css, contract, solcMetadata, provider, transaction, fnName) {
  var types = returnTypes(solcMetadata.output.abi, fnName)
  var decodedTx
  var data
  debugger
  var el = bel`<div class=${css.txReturnItem}></div>`
  if (transaction.hash) {
    var receipt = await transaction.wait()
    data = { from: receipt.from, to: receipt.to, hash: transaction.hash }
    el.appendChild(moreInfo(css, provider, transaction))
    //var txReceipt = await provider.getTransactionReceipt(transaction.hash)
  } else {
    if (types.length === 0) decodedTx = []
    else if (types.length === 1) decodedTx = decodeTxReturn(transaction, types[0])
    else decodedTx = decodeTxReturn(transaction, types)
    data = decodedTx
  }
  el.appendChild(bel`<div class=${css.returnJSON}><pre>${JSON.stringify(data, null, 2)}</pre></div>`)
  return el
}

function moreInfo (css, provider, transaction) {
  var linkToEtherscan = "https://" + provider._network.name  + ".etherscan.io/tx/" + transaction.hash
  return bel`<div class=${css.infoIcon} title="Take me to the Etherscan"><a href=${linkToEtherscan} target="_blank"><i class="fa fa-info-circle"></i></a></div>`
}

function returnTypes (abi, fnName) {
  item = []
  for (var i = 0; i < abi.length; i++) {
    let item = abi[i]
    if (item.name === fnName) return item.outputs
  }
}

function decode (tx, output) {
  if (output.type.includes('int')) return tx.toString()
  if (output.type === ('bytes32')) return ethers.utils.parseBytes32String(tx)
  else return tx
}

function decodeTxReturn (tx, types) {
  var result
  if (Array.isArray(tx)) {  // recursive case
    result = tx.map((x, i) => decodeTxReturn(x,getTypes(types, i)))
    return result
  } else { // atomic case
    decoded = decode(tx, types)
    return decoded
  }
}

function getTypes (types, i) {
  if (Array.isArray(types)) return types[i]
  if (types.components) return types.components
  return types
}

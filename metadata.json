[{
  compiler: { version: "0.4.24+commit.e67f0147" },
  language: "Solidity",
  output: {
    abi: [
      {
        constant: false,
        inputs: [{ name: "data", type: "bytes" }],
        name: "byteArrays",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [],
        name: "clear",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "size", type: "uint256" }],
        name: "createMemoryArray",
        outputs: [{ name: "", type: "bytes" }],
        payable: false,
        stateMutability: "pure",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "index", type: "uint256" },
          { name: "flagA", type: "bool" },
          { name: "flagB", type: "bool" }
        ],
        name: "setFlagPair",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "flag", type: "bool[2]" }],
        name: "addFlag",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "newPairs", type: "bool[2][]" }],
        name: "setAllFlagPairs",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "newSize", type: "uint256" }],
        name: "changeFlagArraySize",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      }
    ],
    devdoc: { methods: {} },
    userdoc: { methods: {} }
  },
  settings: {
    compilationTarget: { "browser/Untitled.sol": "ArrayContract" },
    evmVersion: "byzantium",
    libraries: {},
    optimizer: { enabled: false, runs: 200 },
    remappings: []
  },
  sources: {
    "browser/Untitled.sol": {
      keccak256:
        "0x16d1586ab97ab12aa92899517fa9c5f3fa5f459e86b6251ea9c5fa5a3b9c91aa",
      urls: [
        "bzzr://8bc07a7f3f0c8ddc4ca4daef71fd74eea482ad1b0ce4c25b82c50754fe0cb993"
      ]
    }
  },
  version: 1
},
{"compiler":{"version":"0.4.24+commit.e67f0147"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"topBidder","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"bid","outputs":[],"payable":true,"stateMutability":"payable","type":"function"},{"constant":false,"inputs":[],"name":"auctionClose","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"withdraw","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"topBid","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"beneficiaryAddress","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"name":"_biddingTime","type":"uint256"},{"name":"_beneficiary","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"name":"bidder","type":"address"},{"indexed":false,"name":"bidAmount","type":"uint256"}],"name":"topBidIncreased","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"winner","type":"address"},{"indexed":false,"name":"bidAmount","type":"uint256"}],"name":"auctionResult","type":"event"}],"devdoc":{"methods":{}},"userdoc":{"methods":{"auctionClose()":{"notice":"Auction ends and highest bid is sent to the beneficiary."},"bid()":{"notice":"You may bid on the auction with the value sent along with this transaction. The value may only be refunded if the auction was not won."},"withdraw()":{"notice":"Withdraw a bid that was overbid."}}}},"settings":{"compilationTarget":{"browser/new.sol":"SimpleAuction"},"evmVersion":"byzantium","libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"browser/new.sol":{"keccak256":"0xce815b13911e2b0466a1a45b9a0464d341f789ff31f2cb0574d91814b42868fc","urls":["bzzr://924b3a45537858a5b74790fa87507c90f348fdd339a4096772778322b48176d6"]}},"version":1},

{"compiler":{"version":"0.4.12-nightly.2017.5.4+commit.025b32d9"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"purchaseConfirm","outputs":[],"payable":true,"type":"function"},{"constant":true,"inputs":[],"name":"sellerAddress","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"buyerAddress","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"abortPurchase","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"purchaseValue","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"receivedConfirm","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"purchasestate","outputs":[{"name":"","type":"uint8"}],"payable":false,"type":"function"},{"inputs":[],"payable":true,"type":"constructor"},{"anonymous":false,"inputs":[],"name":"abortedPurchase","type":"event"},{"anonymous":false,"inputs":[],"name":"confirmedPurchase","type":"event"},{"anonymous":false,"inputs":[],"name":"receivedItem","type":"event"}],"devdoc":{"methods":{}},"userdoc":{"methods":{"abortPurchase()":{"notice":"Purchase is aborted and ether is reclaimed. May only be called by the seller before locking the contract."},"purchaseConfirm()":{"notice":"The purchase confirmed as a buyer. Transaction includes <code data-enlighter-language=\"generic\" class=\"EnlighterJSRAW\">2 * purchaseValue</code> ether. The ether is locked until receivedConfirm is called."},"receivedConfirm()":{"notice":"Confirm that you (the buyerAddress) received the item. This will release the locked ether."}}}},"settings":{"compilationTarget":{"browser/new.sol":"Purchase"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"browser/new.sol":{"keccak256":"0xd9fe3eb2b4db9728dc6e7930f5aaf9435df43e3bb18eb172da7d77fca9c9428a","urls":["bzzr://309481eb13f97d3428215812f8f2e300e3d6eae15fbb61cc369ec9dfebcc48d0"]}},"version":1},

{"compiler":{"version":"0.4.25-nightly.2018.8.16+commit.a9e7ae29"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"renounceOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"name":"previousOwner","type":"address"}],"name":"OwnershipRenounced","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"previousOwner","type":"address"},{"indexed":true,"name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"}],"devdoc":{"details":"The Ownable contract has an owner address, and provides basic authorization control functions, this simplifies the implementation of \"user permissions\".","methods":{"constructor":{"details":"The Ownable constructor sets the original `owner` of the contract to the sender account."},"renounceOwnership()":{"details":"Allows the current owner to relinquish control of the contract."},"transferOwnership(address)":{"details":"Allows the current owner to transfer control of the contract to a newOwner.","params":{"_newOwner":"The address to transfer ownership to."}}},"title":"Ownable"},"userdoc":{"methods":{"renounceOwnership()":{"notice":"Renouncing to ownership will leave the contract without an owner. It will not be possible to call the functions with the `onlyOwner` modifier anymore."}}}},"settings":{"compilationTarget":{"browser/Ownable.sol":"Ownable"},"evmVersion":"byzantium","libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"browser/Ownable.sol":{"keccak256":"0x73b445fc1bbb2a288d9a44d162ec6ea228cc02707de2148722f730cf572f5237","urls":["bzzr://82bc986fbb29e8788dc2968dccc8e6ea6762f50961ea0b7f0d0de1568d58ce7f"]}},"version":1},

{"compiler":{"version":"0.4.24+commit.e67f0147"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"mintingFinished","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"currBallot","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_amount","type":"uint256"}],"name":"mint","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"getPreviousWinners","outputs":[{"name":"","type":"address[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"startRound","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_subtractedValue","type":"uint256"}],"name":"decreaseApproval","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"renounceOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"finishMinting","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"prevWinners","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"closeRoundEarly","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_addedValue","type":"uint256"}],"name":"increaseApproval","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"},{"name":"_spender","type":"address"}],"name":"allowance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"closeRound","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"name":"_msg","type":"string"}],"name":"log","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"_win","type":"address"}],"name":"winLog","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"_addr","type":"address"}],"name":"newBallot","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"amount","type":"uint256"}],"name":"Mint","type":"event"},{"anonymous":false,"inputs":[],"name":"MintFinished","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"previousOwner","type":"address"}],"name":"OwnershipRenounced","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"previousOwner","type":"address"},{"indexed":true,"name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"owner","type":"address"},{"indexed":true,"name":"spender","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Approval","type":"event"}],"devdoc":{"methods":{"allowance(address,address)":{"details":"Function to check the amount of tokens that an owner allowed to a spender.","params":{"_owner":"address The address which owns the funds.","_spender":"address The address which will spend the funds."},"return":"A uint256 specifying the amount of tokens still available for the spender."},"balanceOf(address)":{"details":"Gets the balance of the specified address.","params":{"_owner":"The address to query the the balance of."},"return":"An uint256 representing the amount owned by the passed address."},"finishMinting()":{"details":"Function to stop minting new tokens.","return":"True if the operation was successful."},"mint(address,uint256)":{"details":"Function to mint tokens","params":{"_amount":"The amount of tokens to mint.","_to":"The address that will receive the minted tokens."},"return":"A boolean that indicates if the operation was successful."},"renounceOwnership()":{"details":"Allows the current owner to relinquish control of the contract."},"totalSupply()":{"details":"Total number of tokens in existence"},"transferOwnership(address)":{"details":"Allows the current owner to transfer control of the contract to a newOwner.","params":{"_newOwner":"The address to transfer ownership to."}}}},"userdoc":{"methods":{"renounceOwnership()":{"notice":"Renouncing to ownership will leave the contract without an owner. It will not be possible to call the functions with the `onlyOwner` modifier anymore."}}}},"settings":{"compilationTarget":{"gist/AwardToken.sol":"AwardToken"},"evmVersion":"byzantium","libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"gist/AwardToken.sol":{"keccak256":"0x73a3854a8e477290b8b69a5261bdf21487941c4374b4a83267fb38ba6e1b6d10","urls":["bzzr://e3e01005c97336bf20e994d52520014e8fc821715ec3cf10db3829f9f518bfee"]},"gist/Ballot.sol":{"keccak256":"0x61e0c249dd89ceccb617a6baa6cc13e8c70f56b935c052602a74b04b4d5c48f0","urls":["bzzr://c05e1b9a14ddce2a27cef8366812c7f1609bddbbac59b804d3d31552721d119c"]},"github/OpenZeppelin/zeppelin-solidity/contracts/math/SafeMath.sol":{"keccak256":"0x8c5e37342d3f9636554735b684cb26921801c87c4d953c9caf5d667d4c9b9c3b","urls":["bzzr://7d388351ebfdf6c0f83e84a9a380703b164e416f3b8546b699a4c8336e753ac5"]},"github/OpenZeppelin/zeppelin-solidity/contracts/ownership/Ownable.sol":{"keccak256":"0x84c7090c27cf3657b73d9e26b6b316975fa0bd233b8169f254de0c3b3acfaefc","urls":["bzzr://b983355647976c1daa5de581a1b6a41be9c5adc17cce257b8679649db78f8a11"]},"github/OpenZeppelin/zeppelin-solidity/contracts/token/ERC20/ERC20.sol":{"keccak256":"0x673f572af0517ad91ec96c4799c2d4c3289e7d292b597bdfa1f066c7f5917189","urls":["bzzr://6404b8cb70abbf843f545f40adb716dfab6e2e5c3a63817c83f1f8bc0d122209"]},"github/OpenZeppelin/zeppelin-solidity/contracts/token/ERC20/MintableToken.sol":{"keccak256":"0x93291d648d30d9f17ee9cd40bea4db40997e5974d0b2ecf8d4d73a643ae68b9a","urls":["bzzr://1759f5d9b9215b3f8fb454f6e296411d2d904bc18ae50ad3c354279d417fd7e0"]},"github/OpenZeppelin/zeppelin-solidity/contracts/token/ERC20/StandardToken.sol":{"keccak256":"0x0782167ec5031df141d1efb63ed7159d0d380cdabdcd3deb1731ab88ad6090fb","urls":["bzzr://3f18b04d56e053c85baf197dfaf83d8f90eb7b02f131a9948568f66b81281cde"]}},"version":1},

{"compiler":{"version":"0.4.24+commit.e67f0147"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"proposals","outputs":[{"name":"description","type":"string"},{"name":"title","type":"string"},{"name":"voteCount","type":"uint256"},{"name":"targetAddress","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"desc","type":"string"},{"name":"title","type":"string"},{"name":"targetAddr","type":"address"}],"name":"addProposal","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"winningProposal","outputs":[{"name":"currLeader","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"timeOut","outputs":[{"name":"timeOver","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getProposals","outputs":[{"name":"","type":"address[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"proposal","type":"address"}],"name":"vote","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"proposalsSender","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"finish","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"inputs":[{"name":"duration","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"name":"_msg","type":"string"}],"name":"log","type":"event"}],"devdoc":{"methods":{}},"userdoc":{"methods":{"vote(address)":{"notice":"Give a single vote to proposal $(toProposal)."}}}},"settings":{"compilationTarget":{"gist/Ballot.sol":"Ballot"},"evmVersion":"byzantium","libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"gist/Ballot.sol":{"keccak256":"0x61e0c249dd89ceccb617a6baa6cc13e8c70f56b935c052602a74b04b4d5c48f0","urls":["bzzr://c05e1b9a14ddce2a27cef8366812c7f1609bddbbac59b804d3d31552721d119c"]}},"version":1}


]
